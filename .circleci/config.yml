version: 2 # use CircleCI 2.0
jobs: # basic units of work in a run
  build: # runs not using Workflows must have a `build` job as entry point
    docker: # run the steps with Docker
      # CircleCI Go images available at: https://hub.docker.com/r/circleci/golang/
      - image: circleci/golang:1.12 #

    environment: # environment variables for the build itself
      TEST_RESULTS: /tmp/test-results # path to where test results will be saved  
    
    working_directory: /tmp/punch

    steps: # steps that comprise the `build` job
      - checkout # check out source code to working directory
      - run: mkdir -p $TEST_RESULTS
      - run: mkdir /tmp/punch/output

      - restore_cache: # restores saved cache if no changes are detected since last run
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          keys:
            - v1-pkg-cache

      # Normally, this step would be in a custom primary image;
      # we've added it here for the sake of explanation.
      - run: go get github.com/schrej/godacov

      - run:
          name: Run unit tests
    
          # Store the results of our tests in the $TEST_RESULTS directory
          command: |
            go test ./... -tags unit -coverprofile=$TEST_RESULTS/coverage.out
            godacov -t $CODACY_TOKEN -r $TEST_RESULTS/coverage.out -c $CIRCLE_SHA1


      - run:  
          name: Build all
          command: |
            make ROLLBAR_TOKEN=$ROLLBAR_TOKEN VERSION=$CIRCLE_TAG all   

      - save_cache: # Store cache in the /go/pkg directory
          key: v1-pkg-cache
          paths:
            - "/go/package"
            - "/go/pkg/mod"
            - $HOME/.cache/go-build
            - $HOME/gopath/pkg/mod

      
      - persist_to_workspace:
          root: .
          paths:
            - output/*            

  publish-github-release:
    docker:
      - image: circleci/golang:1.12
      
    steps:
      - attach_workspace:
          at: .

      - run:
          name: "Publish Release on GitHub"
          command: |
            go get github.com/tcnksm/ghr
            VERSION=$CIRCLE_TAG
            ghr -t ${GITHUB_TOKEN} -u ${GITHUB_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${VERSION} output/

workflows:
  version: 2
  workflow:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - publish-github-release:
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^\d+\.\d+\.\d+$/
