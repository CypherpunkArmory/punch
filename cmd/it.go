package cmd

import (
	"fmt"
	"os"
	"strconv"

	"github.com/cypherpunkarmory/punch/tunnel"
	"github.com/cypherpunkarmory/punch/utilities"
	"github.com/reiver/go-telnet"
	"github.com/spf13/cobra"
)

var itCmd = &cobra.Command{
	Use:   "it [ports]",
	Short: "Expose a web server on the ports you specify",
	Long:  `To expose a web server on port 80 punch it 80`,
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		var err error
		port, err = strconv.Atoi(args[0])
		if err != nil {
			if args[0] == "chewie" {
				var caller telnet.Caller = telnet.StandardCaller
				telnet.DialToAndCall("towel.blinkenlights.nl:23", caller)
				os.Exit(1)
			}
			fmt.Println("Must supply a port to forward")
			os.Exit(1)
		}
		tunnelMultiple()
	},
}

func init() {
	rootCmd.AddCommand(itCmd)
	itCmd.Flags().StringVarP(&subdomain, "subdomain", "s", "", "If not selected domain name will be autogenerated")
}

func tunnelMultiple() {
	if subdomain != "" && !utilities.CheckSubdomain(subdomain) {
		fmt.Println("Invalid Subdomain")
		os.Exit(1)
	}
	if !utilities.CheckPort(port) {
		fmt.Println("Port is not in range[1-65535")
		os.Exit(1)
	}

	publicKey, err := utilities.GetPublicKey(publicKeyPath)
	if err != nil {
		os.Exit(3)
	}

	protocol := []string{"http"}
	response, err := restAPI.CreateTunnelAPI(subdomain, publicKey, protocol)
	if err != nil {
		fmt.Println(err.Error())
		os.Exit(1)
	}
	if subdomain == "" {
		subdomain, _ = restAPI.GetSubdomainName(response.Subdomain.ID)
	}
	tunnelConfig := tunnel.Config{
		RestAPI:        restAPI,
		TunnelEndpoint: response,
		EndpointType:   "http",
		PrivateKeyPath: privateKeyPath,
		EndpointURL:    baseURL,
		LocalPort:      port,
		Subdomain:      subdomain,
	}
	tunnel.StartReverseTunnel(&tunnelConfig)

}
