package cmd

import (
	"errors"
	"fmt"
	"os"
	"strconv"
	"strings"
	"sync"

	"github.com/cypherpunkarmory/punch/tunnel"
	"github.com/cypherpunkarmory/punch/utilities"
	"github.com/reiver/go-telnet"
	"github.com/spf13/cobra"
)

type tunnelConf struct {
	port        int
	forwardType string
}

var itCmd = &cobra.Command{
	Use:   "it [ports]",
	Short: "Expose a web server on the ports you specify",
	Long: `To expose a http web server on port 80 and https web server on port 443
			 punch it http:80 https:443`,
	Args: cobra.MinimumNArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		var err error
		var confs = make([]tunnelConf, len(args), len(args))
		for index, conf := range args {
			confs[index], err = getTunnelConfig(conf)
			if err != nil {
				break
			}
		}
		if err != nil {
			if args[0] == "chewie" {
				var caller telnet.Caller = telnet.StandardCaller
				telnet.DialToAndCall("towel.blinkenlights.nl:23", caller)
				os.Exit(1)
			}
			fmt.Println("Input does not match the correct syntax type:port")
			os.Exit(1)
		}
		tunnelMultiple(confs)
	},
}

func getTunnelConfig(input string) (tunnelConf, error) {
	var output tunnelConf
	var err error
	conf := strings.Split(input, ":")
	if len(conf) != 2 {
		return output, errors.New("Bad input")
	}
	output.forwardType = conf[0]
	output.port, err = strconv.Atoi(conf[1])
	if err != nil {
		return output, errors.New("Bad input")
	}
	return output, nil
}

func init() {
	rootCmd.AddCommand(itCmd)
	itCmd.Flags().StringVarP(&subdomain, "subdomain", "s", "", "If not selected domain name will be autogenerated")
}

func tunnelMultiple(confs []tunnelConf) {
	var tunnelConfigs = make([]tunnel.Config, len(confs), len(confs))
	if subdomain != "" && !utilities.CheckSubdomain(subdomain) {
		fmt.Println("Invalid Subdomain")
		os.Exit(1)
	}

	publicKey, err := utilities.GetPublicKey(publicKeyPath)
	if err != nil {
		os.Exit(3)
	}
	protocol := []string{"http"}
	response, err := restAPI.CreateTunnelAPI(subdomain, publicKey, protocol)
	if err != nil {
		fmt.Println(err.Error())
		os.Exit(1)
	}
	if subdomain == "" {
		subdomain, _ = restAPI.GetSubdomainName(response.Subdomain.ID)
	}

	for index, conf := range confs {
		if !utilities.CheckPort(conf.port) {
			fmt.Println("Port is not in range[1-65535]")
			restAPI.DeleteTunnelAPI(subdomain)
			os.Exit(1)
		}
		tunnelConfigs[index] = tunnel.Config{
			RestAPI:        restAPI,
			TunnelEndpoint: response,
			EndpointType:   conf.forwardType,
			PrivateKeyPath: privateKeyPath,
			EndpointURL:    baseURL,
			LocalPort:      conf.port,
			Subdomain:      subdomain,
		}
	}
	var wg sync.WaitGroup
	wg.Add(len(tunnelConfigs))
	for _, conf := range tunnelConfigs {
		go tunnel.StartReverseTunnel(conf, &wg)
	}
	wg.Wait()

}
