// Copyright Â© 2018 NAME HERE <EMAIL ADDRESS>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package cmd

import (
	"fmt"

	"strconv"

	"HolePunchCLI/utilities"

	"github.com/spf13/cobra"
)

// httpsCmd represents the https command
var GenerateCert bool
var tlsCmd = &cobra.Command{
	Use:   "tls",
	Short: "Expose a https web server over the port you specify",
	Long:  `To expose a https web server on port 443 punch https -p 443`,
	Run: func(cmd *cobra.Command, args []string) {
		if Subdomain == "" || utilities.CheckSubdomain(Subdomain) {
			if utilities.CheckPort(Port) {
				fmt.Println("Port: " + strconv.Itoa(Port) + " Subdomain: " + Subdomain)
				/*request := OpenRequest{
					Type:      "https",
					Subdomain: Subdomain,
				}
				response,err := CallApiGateway(request)
				if err!=nil{
					fmt.Println("Unable to reach server")
				}else{
					//TODO add reverse tunnel script here
					//TODO get cert
					fmt.Println("localhost:"+strconv.Itoa(Port)+" is now accessible at "+response.Data.Attributes.Subdomain+".orbtestenv.net")
				}*/
			} else {
				fmt.Println("Port is not in range[1-65535")
			}
		} else {
			fmt.Println("Invalid Subdomain")
		}
	},
}

func init() {
	rootCmd.AddCommand(tlsCmd)

	// Here you will define your flags and configuration settings.

	// Cobra supports Persistent Flags which will work for this command
	// and all subcommands, e.g.:
	// httpsCmd.PersistentFlags().String("foo", "", "A help for foo")

	// Cobra supports local flags which will only run when this command
	// is called directly, e.g.:
	// httpsCmd.Flags().BoolP("toggle", "t", false, "Help message for toggle")
	tlsCmd.Flags().IntVarP(&Port, "port", "p", 443, "Default port is 443")
	tlsCmd.Flags().StringVarP(&Subdomain, "domain", "d", "", "If not selected domain name will be autogenerated")
	tlsCmd.Flags().BoolVarP(&GenerateCert, "generate-cert", "c", false, "Use this flag if you want us to automatically create a cert for you")

}
