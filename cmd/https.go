// Copyright Â© 2018 NAME HERE <EMAIL ADDRESS>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package cmd

import (
	"fmt"
	"os"

	"strconv"

	"github.com/cypherpunkarmory/punch/tunnel"
	"github.com/cypherpunkarmory/punch/utilities"
	"github.com/spf13/cobra"
)

// httpsCmd represents the https command
var httpsCmd = &cobra.Command{
	Use:   "https [port]",
	Short: "Expose a https web server over the port you specify",
	Long:  `To expose a https web server on port 443 punch https 443`,
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		var err error
		Port, err = strconv.Atoi(args[0])
		if err != nil {
			fmt.Println("Must supply a port to forward")
			os.Exit(1)
		}
		tunnelHTTPS()
	},
}

func init() {
	rootCmd.AddCommand(httpsCmd)
	httpsCmd.Flags().StringVarP(&Subdomain, "subdomain", "s", "", "If not selected domain name will be autogenerated")

}
func tunnelHTTPS() {
	if Subdomain != "" && !utilities.CheckSubdomain(Subdomain) {
		fmt.Println("Invalid Subdomain")
		os.Exit(1)
	}
	if !utilities.CheckPort(Port) {
		fmt.Println("Port is not in range[1-65535")
		os.Exit(1)
	}

	publicKey, err := utilities.GetPublicKey(PUBLIC_KEY_PATH)
	if err != nil {
		os.Exit(3)
	}

	protocol := []string{"https"}
	response, err := restAPI.CreateTunnelAPI(Subdomain, publicKey, protocol)
	if err != nil {
		fmt.Println(err.Error())
		os.Exit(1)
	}
	if Subdomain == "" {
		Subdomain, _ = restAPI.GetSubdomainName(response.Subdomain.ID)
	}
	tunnelConfig := tunnel.TunnelConfig{
		RestApi:        restAPI,
		TunnelEndpoint: response,
		EndpointType:   protocol,
		PrivateKeyPath: PRIVATE_KEY_PATH,
		EndpointUrl:    BASE_URL,
		LocalPort:      Port,
		Subdomain:      Subdomain,
	}
	tunnel.StartReverseTunnel(&tunnelConfig)
	if err != nil {
		fmt.Println("Unable to setup reverse tunnel")
	}

}
