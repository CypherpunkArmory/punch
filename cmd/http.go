package cmd

import (
	"fmt"
	"os"
	"strconv"

	"github.com/cypherpunkarmory/punch/tunnel"

	"github.com/spf13/cobra"
)

// httpCmd represents the http command
var httpCmd = &cobra.Command{
	Use:   "http [port]",
	Short: "Expose a web server on the port you specify",
	Long:  `To expose a web server on port 80 punch http 80`,
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		var err error
		port, err = strconv.Atoi(args[0])
		if err != nil {
			fmt.Println("Must supply a port to forward")
			os.Exit(1)
		}
		tunnelHTTP()
	},
}

func init() {
	rootCmd.AddCommand(httpCmd)
	httpCmd.Flags().StringVarP(&subdomain, "subdomain", "s", "", "If not selected domain name will be autogenerated")
}

func tunnelHTTP() {
	if subdomain != "" && !checkSubdomain(subdomain) {
		fmt.Println("Invalid Subdomain")
		os.Exit(1)
	}
	if !checkPort(port) {
		fmt.Println("Port is not in range[1-65535]")
		os.Exit(1)
	}

	publicKey, err := getPublicKey(publicKeyPath)
	if err != nil {
		os.Exit(3)
	}

	protocol := []string{"http"}
	response, err := restAPI.CreateTunnelAPI(subdomain, publicKey, protocol)
	if err != nil {
		fmt.Println(err.Error())
		os.Exit(1)
	}
	if subdomain == "" {
		subdomain, _ = restAPI.GetSubdomainName(response.Subdomain.ID)
	}
	tunnelConfig := tunnel.Config{
		ConnectionEndpoint: sshEndpoint,
		RestAPI:            restAPI,
		TunnelEndpoint:     response,
		EndpointType:       "http",
		PrivateKeyPath:     privateKeyPath,
		EndpointURL:        baseURL,
		LocalPort:          port,
		Subdomain:          subdomain,
	}
	tunnel.StartReverseTunnel(&tunnelConfig, nil)
}
