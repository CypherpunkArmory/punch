// Copyright Â© 2018 Andrew Scibek andrewscibek@londontrustmedia.com
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package cmd

import (
	"HolePunchCLI/tunnel"
	"HolePunchCLI/utilities"
	"fmt"

	"github.com/spf13/cobra"
)

// httpCmd represents the http command
var httpCmd = &cobra.Command{
	Use:   "http",
	Short: "Expose a web server on the port you specify",
	Long:  `To expose a web server on port 80 punch http -p 80`,
	Run: func(cmd *cobra.Command, args []string) {
		if Subdomain == "" || utilities.CheckSubdomain(Subdomain) {
			if utilities.CheckPort(Port) {
				/*publicKey, err := utilities.GetPublicKey(PUBLIC_KEY_PATH)
				if err != nil {
					fmt.Println("Unable to find public key")
					os.Exit(3)
				}
				request := restapi.OpenTunnelRequest{
					Type:      "http",
					Subdomain: Subdomain,
					SSHPubKey: publicKey,
				}
				restAPI := restapi.RestClient{
					URL:    BASE_URL,
					APIKEY: API_KEY,
				}
				response, err := restAPI.CreateTunnelAPI(request)
				if err != nil {
					fmt.Println("Unable to reach server")
				} else {
					//res, _ := json.Marshal(response)
					//fmt.Println(string(res))*/
				tunnel.StartReverseTunnel(nil, PRIVATE_KEY_PATH, Port)
				/*data := response.Data.Attributes
					if err != nil {
						fmt.Println("Unable to setup reverse tunnel")
					} else {
						fmt.Println("localhost:" + strconv.Itoa(Port) + " is now accessible at " + data.Subdomain + ".orbtestenv.net")
					}
				}*/
			} else {
				fmt.Println("Port is not in range[1-65535")
			}
		} else {
			fmt.Println("Invalid Subdomain")
		}

	},
}

func init() {
	rootCmd.AddCommand(httpCmd)

	// Here you will define your flags and configuration settings.

	// Cobra supports Persistent Flags which will work for this command
	// and all subcommands, e.g.:
	// httpCmd.PersistentFlags().String("foo", "", "A help for foo")

	// Cobra supports local flags which will only run when this command
	// is called directly, e.g.:
	httpCmd.Flags().IntVarP(&Port, "port", "p", 80, "Default port is 80")
	httpCmd.Flags().StringVarP(&Subdomain, "subdomain", "s", "", "If not selected domain name will be autogenerated")
}
