// Copyright Â© 2018 Andrew Scibek andrewscibek@londontrustmedia.com
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package cmd

import (
	"fmt"
	"os"
	"strconv"

	"github.com/cypherpunkarmory/punch/tunnel"
	"github.com/cypherpunkarmory/punch/utilities"

	"github.com/spf13/cobra"
)

// httpCmd represents the http command
var httpCmd = &cobra.Command{
	Use:   "http [port]",
	Short: "Expose a web server on the port you specify",
	Long:  `To expose a web server on port 80 punch http -p 80`,
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		var err error
		Port, err = strconv.Atoi(args[0])
		if err != nil {
			fmt.Println("Must supply a port to forward")
			os.Exit(1)
		}
		tunnelHTTP()
	},
}

func init() {
	rootCmd.AddCommand(httpCmd)
	httpCmd.Flags().StringVarP(&Subdomain, "subdomain", "s", "", "If not selected domain name will be autogenerated")
}

func tunnelHTTP() {
	if Subdomain == "" || utilities.CheckSubdomain(Subdomain) {
		if utilities.CheckPort(Port) {
			//TODO: fix path to recognize ~/
			publicKey, err := utilities.GetPublicKey(PUBLIC_KEY_PATH)
			if err != nil {
				fmt.Println("Unable to find public key")
				os.Exit(3)
			}
			response, err := restAPI.CreateTunnelAPI(Subdomain, publicKey, "http")
			if err != nil {
				fmt.Println(err.Error())
				os.Exit(1)
			} else {
				if Subdomain == "" {
					Subdomain, _ = restAPI.GetSubdomainName(response.Subdomain.ID)
				}
				tunnelConfig := tunnel.TunnelConfig{
					RestApi:        restAPI,
					TunnelEndpoint: response,
					EndpointType:   "http",
					PrivateKeyPath: PRIVATE_KEY_PATH,
					EndpointUrl:    BASE_URL,
					LocalPort:      Port,
					Subdomain:      Subdomain,
				}
				tunnel.StartReverseTunnel(&tunnelConfig)
				if err != nil {
					fmt.Println("Unable to setup reverse tunnel")
				}
			}
		} else {
			fmt.Println("Port is not in range[1-65535")
		}
	} else {
		fmt.Println("Invalid Subdomain")
	}

}
